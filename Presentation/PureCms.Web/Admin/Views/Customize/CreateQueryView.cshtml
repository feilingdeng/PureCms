@model PureCms.Web.Admin.Models.EditQueryViewModel
@{
    ViewBag.Title = "CreateQueryView";
    Layout = "../Shared/_CustomizeLayout.cshtml";
}


<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">
            <a data-toggle="collapse"
               href="#collapseTwo">
                <strong>@Model.EntityInfo.LocalizedName - 新建视图</strong>
            </a>
        </h3>
    </div>
    <div id="collapseTwo" class="panel-collapse collapse in">
        <div class="panel-body">
            @using (Html.BeginForm("CreateQueryView", "customize", FormMethod.Post, new { @id = "editform", @class = "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary()
                @Html.HiddenFor(x => x.QueryViewId)
                @Html.HiddenFor(x => x.EntityId)
                @Html.HiddenFor(x => x.EntityInfo.Name)
                @Html.HiddenFor(x => x.FetchConfig)
                @Html.HiddenFor(x => x.LayoutConfig)
                <div class="form-group col-sm-12">
                    @Html.LabelFor(x => x.Name, "名称", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control required" })
                    </div>
                </div>
                <div class="form-group col-sm-12">
                    @Html.LabelFor(x => x.IsDefault, "默认视图", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        <label class="checkbox-inline">
                            @Html.RadioButtonFor(x => x.IsDefault, true, new { @class = "required" }) 是
                        </label>
                        <label class="checkbox-inline">
                            @Html.RadioButtonFor(x => x.IsDefault, false, new { @class = "required" }) 否
                        </label>
                    </div>
                </div>
                @*<div class="form-group col-sm-12">
                        @Html.LabelFor(x => x.IsPrivate, "视图类型", new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            <label class="checkbox-inline">
                                @Html.RadioButtonFor(x => x.IsPrivate, true, new { @class = "required" }) 个人
                            </label>
                            <label class="checkbox-inline">
                                @Html.RadioButtonFor(x => x.IsPrivate, false, new { @class = "required" }) 公共
                            </label>
                        </div>
                    </div>*@
                <div class="form-group col-sm-12">
                    @Html.LabelFor(x => x.IsSimpleFilter, "简单过滤模式", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        <label class="checkbox-inline">
                            @Html.RadioButtonFor(x => x.IsSimpleFilter, true, new { @class = "required" }) 启用
                        </label>
                        <label class="checkbox-inline">
                            @Html.RadioButtonFor(x => x.IsSimpleFilter, false, new { @class = "required" }) 禁用
                        </label>
                    </div>
                </div>
                <div class="form-group col-sm-12">
                    @Html.LabelFor(x => x.Description, "描述", new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        @Html.TextAreaFor(x => x.Description, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-4">
                        <label for="sortable" class="col-sm-12">记录类型</label>
                        <div class="col-sm-12">
                            <select id="entities" class="form-control"></select>
                            <div class="bg-info" style="height:220px; ">
                                <ul id="attributes" class="list-unstyled connectedSortable" data-bind="foreach: items" style="background:#eee; line-height:25px; height:30px;">
                                    <li class="ui-state-default" data-bind="text: localizedname, attr: { 'data-name': name, 'data-entityname': entityname, 'data-entitylocalizedname': entitylocalizedname }">
                                        <span class="glyphicon glyphicon-screenshot"></span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-8">
                        <label for="sortable" class="col-sm-12">列表排版</label>
                        <div class="col-sm-12" style="height:220px; ">
                            <div class="btn-group">
                                <button type="button" class="btn btn-info btn-xs" onclick="moveColumn('before')" title="左移">
                                    <span class="glyphicon glyphicon-arrow-left"></span> 左移
                                </button>
                                <button type="button" class="btn btn-info btn-xs" onclick="moveColumn('after')" title="右移">
                                    <span class="glyphicon glyphicon-arrow-right"></span> 右移
                                </button>
                                <button type="button" class="btn btn-info btn-xs" onclick="removeColumn()" title="删除">
                                    <span class="glyphicon glyphicon-trash"></span> 删除
                                </button>
                                <button type="button" class="btn btn-info btn-xs" data-toggle="modal" data-target="#filterModal" title="过滤条件">
                                    <span class="glyphicon glyphicon-filter"></span> 过滤条件
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-bordered table-condensed">
                                    <caption></caption>
                                    <thead>
                                        <tr id="views" class="connectedSortable" style="height:50px; background:#eee;">
                                            <th class="small text-danger ui-state-disabled shadow">从左边将属性拖放到这里</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                        <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                        <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                        <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                        <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group col-sm-12 text-center" id="form-buttons">
                    <button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-saved"></span> 保存</button>
                    <button type="reset" class="btn btn-default"><span class="glyphicon glyphicon-refresh"></span> 重置</button>
                </div>
            }
        </div>
    </div>
</div>
<!-- 列参数设置（Modal） -->
<div class="modal fade" id="columnModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"
                        aria-hidden="true">
                    ×
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    列参数
                </h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="columnwidth">宽度</label>
                    <input id="columnwidth" name="columnwidth" type="text" class="form-control input-sm" />
                </div>
                <div class="form-group">
                    <label for="columnvisibled">
                        显示
                        <input id="columnvisibled" name="columnvisibled" type="checkbox" />
                    </label>
                </div>
                <div class="form-group">
                    <label for="sorttype">排序</label>
                    <select id="sorttype" name="sorttype" class="form-control input-sm">
                        <option value="">请选择</option>
                        <option value="asc">升序</option>
                        <option value="desc">降序</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    关闭
                </button>
                <button type="button" class="btn btn-primary" onclick="saveColumnParams()">
                    确定更改
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<!-- 过滤条件设置（Modal） -->
<div class="modal fade" id="filterModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="width:700px; height:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"
                        aria-hidden="true">
                    ×
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    过滤条件设置
                </h4>
            </div>
            <div class="modal-body">
                <div class="table-responsive" style="width:650px; height:400px; overflow:auto;">
                    <div class="form-group">
                        <div class="btn-group btn-group-xs">
                            <button type="button" class="btn btn-info" onclick="clearConditions()">
                                <span class="glyphicon glyphicon-trash"></span> 清空
                            </button>
                            <button type="button" class="btn btn-info" onclick="groupConditions('and')">
                                <span class="glyphicon glyphicon-link"></span> "并且"组合
                            </button>
                            <button type="button" class="btn btn-info" onclick="groupConditions('or')">
                                <span class="glyphicon glyphicon-link"></span> "或者"组合
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <table id="filterConditions" class="table table-condensed table-selected">
                            <thead class="hide">
                                <tr>
                                    <th></th>
                                    <th>名称</th>
                                    <th>比较关系</th>
                                    <th>数值</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr class="hide filterrow">
                                    <td style="width:10px;">
                                        <input type="checkbox" />
                                    </td>
                                    <td>
                                        <select name="filtername" class="form-control input-sm" onchange="onChangeAttribute(this)"></select>
                                    </td>
                                    <td>
                                        <select name="filteroperator" class="form-control input-sm" defaultselected="eq"><option value="eq" title="等于">等于</option><option value="ne" title="不等于">不等于</option><option value="not-null" title="包含数据">包含数据</option><option value="null" title="不包含数据">不包含数据</option><option value="contains" title="包含" fetchop="like" fetchval="%{0}%">包含</option><option value="doesnotcontain" title="不包含" fetchop="not-like" fetchval="%{0}%">不包含</option><option value="beginswith" title="开头等于" fetchop="like" fetchval="{0}%">开头等于</option><option value="doesnotbeginwith" title="开头不等于" fetchop="not-like" fetchval="{0}%">开头不等于</option><option value="endswith" title="结尾等于" fetchop="like" fetchval="%{0}">结尾等于</option><option value="doesnotendwith" title="结尾不等于" fetchop="not-like" fetchval="%{0}">结尾不等于</option></select>

                                    </td>
                                    <td>
                                        <input type="text" name="filtervalue" class="form-control input-sm" />
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="4">
                                        <select id="filternamelist" name="filtername" class="form-control input-sm" onchange="addCondition(this)">
                                            <option value="">请选择</option>
                                        </select>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    关闭
                </button>
                <button type="button" class="btn btn-primary" onclick="saveFilter()">
                    确定更改
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
@section Header{
    <link rel="stylesheet" href="/content/jquery-ui-1.10.3/themes/base/jquery.ui.theme.css">
    <style>
        .ui-state-highlight {
            /*height: 25px;
            line-height: 25px;*/
            width: 50px;
            border-bottom: 3px #000 solid;
            list-style: none;
            height: 50px;
        }

        .selected {
            border: 1px solid blue;
            background: #d9edf7;
        }

            .selected a {
                font-weight: bolder;
            }

        .table {
            margin-bottom: 0px !important;
        }
    </style>
}
@section Scripts {
    <script src="/content/jquery-ui-1.10.3/ui/jquery.ui.core.js"></script>
    <script src="/content/jquery-ui-1.10.3/ui/jquery.ui.widget.js"></script>
    <script src="/content/jquery-ui-1.10.3/ui/jquery.ui.mouse.js"></script>
    <script src="/content/jquery-ui-1.10.3/ui/jquery.ui.sortable.js"></script>
    <script src="/admin/content/js/jquery.form.js"></script>
    <script src="/admin/content/js/jquery-validate/jquery.validate.min.js"></script>
    <script src="/admin/content/js/jquery-validate/messages_zh.min.js"></script>
    <script>
        var QueryObject = { Distinct: false, NoLock: true, EntityName: $('#EntityInfo_Name').val().toLowerCase(), Criteria: new FilterExpression(), Orders: new Array(), ColumnSet: { AllColumns: false, Columns: new Array() }, LinkEntities: new Array() };
        var Relationships;
        $(function () {
            //表单验证
            purecms.form($("#editform"), function (response) {
                $('#FetchConfig').val('');
                $('#LayoutConfig').val('');
            });

            $("#attributes, #views").sortable({
                connectWith: ".connectedSortable"
                , placeholder: "ui-state-highlight"
                //, revert: true
                , opacity: 0.3
                //, forcePlaceholderSize: true
                , cursor: "move"
                , cancel: ".ui-state-disabled"
            }).disableSelection();
            $("#attributes").on("sortreceive", function (event, ui) {
                console.log(event, ui);
                var old = $("#attributes").find('th');
                var el = $('<li class="ui-state-default">' + old.text() + '</li>');
                old.replaceWith(el);
            });
            $("#views").on("sortreceive", function (event, ui) {
                console.log(event, ui);
                var li = $("#views").find('li');
                var name = li.attr('data-name').toLowerCase();
                var entityname = li.attr('data-entityname').toLowerCase();
                var entitylocalizedname = li.attr('data-entitylocalizedname').toLowerCase();
                var text = entityname == QueryObject.EntityName.toLowerCase() ? li.text() : li.text() + '(' + entitylocalizedname + ')';
                var el = $('<th style="width:100px;"><a class="btn btn-link">' + text + '</a></th>');
                el.attr({ 'data-name': name, 'data-entityname': entityname, 'data-entitylocalizedname': entitylocalizedname, 'data-width': 100, 'data-visibled': true, 'data-sorttype': '' });
                li.replaceWith(el);
                $("#views").parents('table').find('tbody tr').append('<td class="small text-muted ui-state-disabled">数据</td>');
                $("#views").parents('table').find('.shadow').addClass('hide');
                saveGridConfig();
            });
            $("#views").on("sortremove", function (event, ui) {
                var td = $("#views").parents('table').find('tbody tr').find('td:last');
                if (td) td.remove();
                if ($("#views").find('th:not(.shadow)').length == 0)
                    $("#views").parents('table').find('.shadow').removeClass('hide');
            });

            $.when(loadEntities()).done(loadAttributes());
            loadFilterAttributes();

            //列表列选中
            $("#views").on('click', 'th > a', function () {
                $(this).parent().siblings().removeClass('selected');
                $(this).parent().addClass('selected');
                editColumnParams();
            });
            $("#views").on('click', 'th', function () {
                $("#views").find('th').removeClass('selected');
                $(this).toggleClass('selected');
            });
            //过滤条件行单击时选中
            //purecms.tableselected('.table-selected', '.filterrow');
            $('#filterConditions').on('click', ':checkbox', function (e) {//input[name=filtergroup]
                var ischecked = $(this).prop('checked');
                if (ischecked) {
                    $(this).parents('tr').first().addClass('active');
                }
                else {
                    $(this).parents('tr').first().removeClass('active');
                }
            });
            $('#entities').on('change', null, function (e) {
                loadAttributes();
            });
        });
        //加载实体
        function loadEntities() {
            var dfd = $.Deferred();
            var entityid = $('#EntityId').val();
            purecms.getjson('/admin/customize/EntitiesJson', { entityid: entityid }, function (data) {
                $(data.content).each(function (i, n) {
                    $('#entities').append('<option value="' + n.entityid + '">' + n.localizedname + '</option>');
                });
                purecms.selectedvalue($('#entities'), entityid);
                dfd.resolve();
            });
            return dfd.promise();
        }
        //加载字段
        function loadAttributes() {
            var entityid = purecms.selectedvalue($('#entities')) || $('#EntityId').val();
            var _html = new Array();
            purecms.getjson('/admin/customize/AttributesJson', { entityid: entityid }, function (data) {
                $(data.content).each(function (i, n) {
                    _html.push('<li class="ui-state-default" data-name="' + n.name + '" data-entityname="' + n.entityname + '" data-entitylocalizedname="' + n.entitylocalizedname + '">');
                    _html.push('<span class="glyphicon glyphicon-screenshot"></span>');
                    _html.push(n.localizedname);
                    _html.push('</li>');
                });
                $('#attributes').html(_html.join(''));
            });
        }
        //加载过滤条件字段选项
        function loadFilterAttributes() {
            var entityid = purecms.selectedvalue($('#entities')) || $('#EntityId').val();
            var _mainOptions = new Array(), _relatedOptions = new Array();
            purecms.getjson('/admin/customize/AttributesJson', { entityid: entityid }, function (data) {
                if (!data || data.content.length == 0) return;
                _mainOptions.push('<optgroup label="字段">');
                $(data.content).each(function (i, n) {
                    _mainOptions.push('<option value="' + n.name + '" data-entityname="' + n.entityname + '" data-type="' + n.attributetypename + '">' + n.localizedname + '</option>');
                });
                _mainOptions.push('</optgroup>');
                purecms.getjson('/admin/customize/RelationsJson', { referencingentityid: entityid }, function (data) {
                    if (!data || data.content.length == 0) return;
                    Relationships = data.content;
                    _relatedOptions.push('<optgroup label="关联">');
                    $(data.content).each(function (ii, nn) {
                        _relatedOptions.push('<option value="' + nn.referencedattributename + '" data-entityname="' + nn.referencedentityname + '" data-type="' + nn.referencedattributetypename + '">' + nn.referencingattributelocalizedname + '(' + nn.referencedentitylocalizedname + ')' + '</option>');
                    });
                    _relatedOptions.push('</optgroup>');
                    $('#filternamelist').append($(_mainOptions.join('') + _relatedOptions.join('')));
                    $('#filterConditions > tfoot > tr:first').find('select[name=filtername]').append($(_mainOptions.join('') + _relatedOptions.join('')));
                });
            });
        }
        //加载操作符
        function loadOperators(target, type) {
            target.empty();
            purecms.getjson('/admin/customize/OperatorJson', { attributeType: type }, function (data) {
                $(data.content).each(function (i, n) {
                    target.append('<option value="' + n.value + '">' + n.key + '</li>');
                });
            });
        }
        //字段选择后更改操作符
        function onChangeAttribute(e) {
            var $this = $(e);
            var target = $this.parents('tr').find('select[name=filteroperator]');
            var type = $this.find('option:selected').attr('data-type');
            loadOperators(target, type);
        }
        //列移动排序
        function moveColumn(direction) {
            var $this = $("#views").find('.selected');
            if (direction == 'before' && $this.prev().length > 0) {
                $this.insertBefore($this.prev());
            }
            else if (direction == 'after' && $this.next().length > 0) {
                $this.insertAfter($this.next());
            }
        }
        //编辑列参数
        function editColumnParams() {
            var $this = $("#views").find('.selected');
            var width = $this.attr('data-width');
            var visibled = $this.attr('data-visibled');
            var sorttype = $this.attr('data-sorttype');
            $('#columnModal').find('input[name=columnwidth]').val(width);
            $('#columnModal').find('input[name=columnvisibled]').prop('checked', visibled);
            purecms.selectedvalue($('#columnModal').find('select[name=sorttype]'), sorttype);
            $('#columnModal').modal({
                keyboard: true
            })
        }
        //保存列参数设置
        function saveColumnParams() {
            var $this = $("#views").find('.selected');
            var width = $('#columnModal').find('input[name=columnwidth]').val();
            var visibled = $('#columnModal').find('input[name=columnvisibled]').prop('checked');
            var sorttype = purecms.selectedvalue($('#columnModal').find('select[name=sorttype]'));
            $this.attr('data-sorttype', sorttype);
            $this.attr('data-width', width);
            $this.attr('data-visibled', visibled);
            $this.attr('style', 'width:' + width + 'px;');
            $('#columnModal').modal('hide');
            $("#views").parents('table').removeClass('table');
            //reset form
            $('#columnModal').find('input[name=columnwidth]').val('');
            $('#columnModal').find('input[name=columnvisibled]').prop('checked', true);
            purecms.selectedvalue($('#columnModal').find('select[name=sorttype]'), '');
            saveGridConfig();
        }
        //保存列表布局
        function saveGridConfig() {
            var grid = { SortColumns: [], Rows: [] };
            var sortColumn = { Name: '', SortAscending: false };
            var row = { Name: '', Id: '', Cells: [] };
            var cell = { Name: '', EntityName: '', IsHidden: false, IsSortable: false, Width: 0 };
            var sortColumns = new Array(), cells = new Array(), columns = new Array(), orders = new Array();
            $("#views").find('th:not(.shadow)').each(function (i, n) {
                var column = $(n);
                var name = column.attr('data-name').toLowerCase();
                var entityname = column.attr('data-entityname').toLowerCase();
                var visibled = column.attr('data-visibled');
                var sorttype = column.attr('data-sorttype').toLowerCase();
                var width = column.attr('data-width');
                //是否为关联实体字段
                if (entityname != QueryObject.EntityName) {
                    //是否已存在
                    var le = null;
                    $(QueryObject.LinkEntities).each(function (ii, nn) {
                        if (nn.LinkToEntityName.toLowerCase() == entityname) {
                            le = nn;
                            return false;
                        }
                    });
                    if (le != null) {
                        if ($.inArray(name, le.Columns.Columns) < 0) {//列名不存在
                            le.Columns.Columns.push(name);
                        }
                        name = le.EntityAlias + '.' + name;//cell's name
                    }
                    else {
                        le = new LinkEntity();//生成关联实体别名
                        le.LinkToEntityName = entityname;
                        le.EntityAlias = entityname + '_' + Xms.Utility.NewGuid().ToString('N');
                        le.LinkToAttributeName = entityname + 'id';
                        le.LinkFromEntityName = QueryObject.EntityName;
                        $(Relationships).each(function (ii, nn) {//from.createdby => to.userid
                            if (nn.referencedentityname.toLowerCase() == entityname && nn.referencedattributename.toLowerCase() == entityname + 'id') {
                                le.LinkFromAttributeName = nn.referencingattributename.toLowerCase();
                                return false;
                            }
                        });
                        le.Columns.Columns.push(name);
                        QueryObject.LinkEntities.push(le);
                        name = le.EntityAlias + '.' + name;//cell's name
                    }
                }
                else { columns.push(name); }
                cell = cell.constructor();//js对象为引用类型，所以需要NEW一个对象
                cell.Name = name;
                cell.EntityName = entityname;
                cell.IsHidden = !visibled;
                cell.IsSortable = sorttype != '';
                cell.Width = width;
                cells.push(cell);
                if (sorttype != '') {
                    sortColumn = sortColumn.constructor();
                    sortColumn.Name = name;
                    sortColumn.SortAscending = sorttype == 'asc';
                    sortColumns.push(sortColumn);
                    var ord = { AttributeName: name, OrderType: sorttype == 'asc' ? 0 : 1 };
                    orders.push(ord);
                }
            });
            row.Cells = cells;
            grid.SortColumns = sortColumns;
            grid.Rows.push(row);
            $('#LayoutConfig').val(JSON.stringify(grid));

            QueryObject.ColumnSet.Columns = columns;
            QueryObject.Orders = orders;
            $('#FetchConfig').val(JSON.stringify(QueryObject));
        }
        //增加一行过滤条件
        function addCondition(e) {
            var newRow = $('#filterConditions > tfoot > tr:first').clone(true).removeClass('hide');
            var fname = purecms.selectedvalue($(e));
            if (fname != null) {
                purecms.selectedvalue(newRow.find('select[name=filtername]'), fname);
            }
            onChangeAttribute(newRow.find('select[name=filtername]').get(0));
            $('#filterConditions > tbody').append(newRow);
            purecms.selectedvalue($(e), '');
        }
        //清空过滤条件
        function clearConditions() {
            purecms.confirm('确认', '确定清空所有过滤条件？', function () {
                $('#filterConditions tbody tr:visible').remove();
            });
        }
        //过滤条件组合
        function groupConditions(logical) {
            var rows = $('#filterConditions tbody tr.active');
            if (rows.length < 2) {
                purecms.alert(false, '请选择2个条件以上');
                return;
            }
            //检测
            //rows.each(function (i, n) {
            //    if (row.is('.filterrow')) {
            //        //如果是组合内，则更改组合符号
            //        if (row.parents('tr.filtergroup').first()) {
            //            row.parents('tr.filtergroup').first().find('td:first').find('.dropdown-menu > li:eq(1)').trigger('click');
            //        }
            //    }
            //    else if (row.is('.filtergroup')) {
            //        removenode.push(row.parents('tr.filterrow'));
            //        var node = $('<tr class="filterrow"><td colspan="4"><table class="table table-condensed"><tbody></tbody></table></td></tr>');
            //        node.find('tbody').append(row);
            //        parent.find('#' + grouplistid).append(node);
            //    }
            //    //如果两个选项跨组合，或跨实体，则取消
            //    //...
            //});
            var container = new Array();
            var grouplistid = 'grouplist_' + Math.round(new Date().getTime() / 1000);
            var insertObj, pos;
            if (rows.first().prev().length == 0) {//第一行
                if (rows.last().next().length > 0) {
                    insertObj = rows.last().next();
                    pos = 'before';
                }
                else {
                    insertObj = rows.first().parent();
                    pos = 'append';
                }
            }
            else {
                insertObj = rows.first().prev();
                pos = 'after';
            }
            container.push('<tr class="filterrow"><td colspan="4">');
            container.push('<table class="table table-condensed"><tbody><tr class="filtergroup" data-logical="' + logical + '" data-groupid="' + grouplistid + '">');
            container.push('<td class="bg-info text-primary" style="vertical-align:middle;">');
            container.push('<div class="dropdown"><input type="checkbox" name="filtergroup" />');
            container.push('<a class="dropdown-toggle" data-toggle="dropdown" href="#"><span name="logicaltext">' + (logical == 'and' ? '并且' : '或者') + '</span> <span class="caret"></span></a>');
            container.push('<ul class="dropdown-menu">');
            container.push('<li><a class="btn-link" onclick="javascript:cancelGroup(this,\'' + grouplistid + '\')">取消组合</a></li>');
            container.push('<li><a class="btn-link" onclick="javascript:changeGroupLogical(this)">转换为"' + (logical != 'and' ? '并且' : '或者') + '"组合</a></li>');
            container.push('</ul></div>');
            container.push('</td>');
            container.push('<td colspan="3">');
            container.push('<table class="table table-condensed"><tbody name="grouplist" id="' + grouplistid + '">');
            /********放置条件********/
            container.push('</tbody></table>');
            container.push('</td>');
            container.push('</tr>');
            container.push('</tbody></table>');
            container.push('</td></tr>');
            var parent = $(container.join('\n'));
            var removenode = new Array();
            rows.each(function (i, n) {
                var row = $(n);
                row.removeClass('active').find(':checkbox').prop('checked', false);
                row.find('tr').removeClass('active');
                if (row.is('.filterrow')) {
                    parent.find('#' + grouplistid).append(row.clone(true));
                    //if (row.parents('tr.filterrow').first()) removenode.push(row.parents('tr.filterrow').first());
                    row.remove();
                }
                else if (row.is('.filtergroup')) {
                    removenode.push(row.parents('tr.filterrow:first'));
                    var node = $('<tr class="filterrow"><td colspan="4"><table class="table table-condensed"><tbody></tbody></table></td></tr>');

                    node.find('tbody').empty().append(row.clone(true));
                    parent.find('#' + grouplistid).append(node);
                    row.remove();
                }
            });
            console.log(pos);
            if (insertObj.is('tr')) {
                if (pos == 'before') insertObj.before(parent);
                else insertObj.after(parent);
                //insertObj.remove();
                $(removenode).each(function (i, n) { $(n).remove(); });
            }
            else {
                insertObj.append(parent);
                //insertObj.find('.filterrow:first').remove();
            }
            ////$(removenode).each(function (i, n) { $(n).remove(); });
        }
        //设置组合逻辑
        function changeGroupLogical(e) {
            var logical = $(e).parents('table').first().find('[data-logical]').attr('data-logical');
            logical = logical == 'and' ? 'or' : 'and';
            $(e).parents('table').first().find('[data-logical]').attr('data-logical', logical)
            $(e).parents('td').first().find('[name=logicaltext]').text(logical == 'and' ? '并且' : '或者');
            $(e).text('转换为"' + (logical != 'and' ? '并且' : '或者') + '"组合');
        }
        //取消组合
        function cancelGroup(e, groupid) {
            var g = $(e).parents('td').first();
            var rows = $('#' + groupid).children();
            $('#filterConditions tr.filtergroup[data-groupid=' + groupid + ']').replaceWith(rows);
            g.remove();
        }
        //保存过滤条件
        function saveFilter() {
            var rows = $('#filterConditions > tbody > tr.filterrow');
            var filterContainer = new FilterExpression();
            filterContainer.FilterOperator = 'and';
            rows.each(function (i, n) {
                var row = $(n);
                if (row.find('.filtergroup').length > 0) {
                    var logical = row.find('.filtergroup:first').attr('data-logical');
                    var filter = new FilterExpression();
                    filter.FilterOperator = logical;
                    //递归
                    var gid = row.find('.filtergroup:first').attr('data-groupid');
                    setFilter(filter, gid);
                    filterContainer.Filters.push(filter);
                }
                else {
                    var logical = "and";
                    var name = purecms.selectedvalue(row.find('select[name=filtername]'));
                    var operator = purecms.selectedvalue(row.find('select[name=filteroperator]'));
                    var value = row.find('input[name=filtervalue]').val();
                    var condition = ConditionExpression();
                    condition.AttributeName = name;
                    condition.Operator = operator;
                    condition.Values.push(value);
                    filterContainer.FilterOperator = logical;
                    filterContainer.Conditions.push(condition);
                    filterContainer.Filters = [];
                }
            });
            console.log(JSON.stringify(filterContainer));

            QueryObject.Criteria = filterContainer;
            $('#FetchConfig').val(JSON.stringify(QueryObject));
            $('#filterModal').modal('hide');
        }
        function setFilter(filter, filterrows) {

        }
        function LinkEntity() {
            var self = new Object(); 
            self.LinkFromEntityName = '';
            self.LinkFromAttributeName = '';
            self.LinkToEntityName = '';
            self.LinkToAttributeName = '';
            self.JoinOperator = 1;
            self.EntityAlias = '';
            self.FromEntityAlias = '';
            self.Columns = { Columns:[]};
            return self;
        }
        function FilterExpression() {
            var self = new Object();
            self.FilterOperator = 'and';
            self.Conditions = new Array();
            self.Filters = new Array();
            return self;
        }
        function ConditionExpression() {
            var self = new Object();
            self.AttributeName = '';
            self.Operator = '';
            self.Values = new Array();
            return self;
        }
    </script>
}